generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id         String   @id @default(cuid())
  title      String
  content    String
  excerpt    String?
  authorId   String
  tags       String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorName String
  imageData  String?
  category  String?
}

model Booking {
  id              String    @id @default(cuid())
  firstname       String
  lastname        String
  email           String
  phone           String
  country         String?
  status          Status    @default(PENDING)
  bookingDate     DateTime?
  numberOfGuests  Int       @default(1)
  specialRequests String?
  destinationName String?
  price           Decimal?  @db.Decimal(10, 2)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model PackageBooking {
  id              String    @id @default(cuid())
  firstname       String
  lastname        String
  email           String
  phone           String
  country         String?
  status          Status    @default(PENDING)
  bookingDate     DateTime?
  numberOfGuests  Int       @default(1)
  specialRequests String?
  packageId       String
  price           Decimal   @db.Decimal(10, 2)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  package         Package   @relation(fields: [packageId], references: [id])
}

model Package {
  id          String           @id @default(cuid())
  name        String
  location    String
  imageData   String?
  duration    String
  groupSize   String
  price       Decimal          @db.Decimal(10, 2)
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  authorId    String
  authorName  String
  included    Included[]
  bookings    PackageBooking[]
}

model Included {
  id        String  @id @default(cuid())
  item      String
  packageId String
  package   Package @relation(fields: [packageId], references: [id])
}

model KeepAlive {
  id     BigInt  @id @default(autoincrement())
  name   String? @default("")
  random String? @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model Destination {
  id          String   @id @default(cuid())
  name        String
  country     String
  city        String
  amount      Decimal  @db.Decimal(10, 2)
  tags        String[]
  imageData   String?
  description String
  daysNights  Int
  tourType    TourType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TourType {
  DAYS
  NIGHTS
}

enum Role {
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
