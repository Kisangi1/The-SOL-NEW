// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id         String   @id @default(cuid())
  title      String
  content    String
  excerpt    String?
  authorId   String
  tags       String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorName String
  imageData  String?
  category   String?
}

model Destination {
  id          String   @id @default(cuid())
  name        String
  description String
  imageData   String?
  locations   String[]
  inclusive   String[]
  exclusive   String[]
  amount      Float
  whatToCarry String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    Booking[]
}

model Package {
  id            String   @id @default(cuid())
  name          String
  description   String
  imageData     String?
  amount        Float
  numberOfDays  Int
  dayOrNight    String
  type          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bookings      Booking[]
}


model Booking {
  id            String   @id @default(cuid())
  name          String
  email         String
  startDate     DateTime
  endDate       DateTime
  message       String?
  status        Status   @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  destination   Destination? @relation(fields: [destinationId], references: [id])
  destinationId String?
  package       Package?    @relation(fields: [packageId], references: [id])
  packageId     String?
}

model KeepAlive {
  id     BigInt  @id @default(autoincrement())
  name   String? @default("")
  random String? @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model Subscriber {
  id           String   @id @default(cuid())
  email        String   @unique
  status       String   @default("ACTIVE")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum PackageType {
  VALENTINE
  CHRISTMAS
  EASTER
  EID
  MADARAKA
  WEEKEND
  HONEYMOON
}

